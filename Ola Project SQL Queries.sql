# DATABASE CREATION
CREATE DATABASE ola;                       
USE ola;

# IMPORT TABLE BOOKINGS

#1 RETRIVE ALL SUCCESSFUL BOOKINGS
CREATE VIEW SUCCESSFUL_BOOKINGS AS
SELECT * FROM BOOKINGS WHERE BOOKING_STATUS = 'SUCCESS';

SELECT * FROM SUCCESSFUL_BOOKINGS;

#2 FIND THE AVERAGE RIDE DISTANCE FOR EACH VEHICLE TYPE
CREATE VIEW AVG_RIDE_DISTANCE_FOR_EACH_VEHICLE_TYPE AS
SELECT VEHICLE_TYPE, AVG(RIDE_DISTANCE) FROM BOOKINGS GROUP BY VEHICLE_TYPE;

SELECT * FROM AVG_RIDE_DISTANCE_FOR_EACH_VEHICLE_TYPE;

#3 GET THE TOTAL NUMBER OF CANCELED RIDES BY CUSTOMER
CREATE VIEW CANCELED_RIDES_BY_CUSTOMER AS
SELECT COUNT(*) FROM BOOKINGS WHERE BOOKING_STATUS = 'CANCELED BY CUSTOMER';

SELECT * FROM CANCELED_RIDES_BY_CUSTOMER;

#4 LIST THE TOP 5 CUSTOMERS WHO BOOKED THE HIGHEST NUMBER OF RIDES
CREATE VIEW TOP_5_CUSTOMERS AS
SELECT CUSTOMER_ID, COUNT(BOOKING_ID) 
FROM BOOKINGS 
GROUP BY CUSTOMER_ID 
ORDER BY COUNT(BOOKING_ID) DESC LIMIT 5;

SELECT * FROM TOP_5_CUSTOMERS;

#5 GET THE NUMBER OF RIDES CANCELED BY DRIVERS DUE TO PERSONAL AND CAR-RELATED ISSUES
CREATE VIEW CANCELED_BY_DRIVERS_P_C_ISSUES AS
SELECT COUNT(*) FROM BOOKINGS WHERE CANCELED_RIDES_BY_DRIVER = 'PERSONAL & CAR RELATED ISSUE';

SELECT * FROM CANCELED_BY_DRIVERS_P_C_ISSUES;

#6 FIND THE MAXIMUM AND MINIMUM DRIVER RATINGS FOR PRIME SEDAN BOOKINGS
CREATE VIEW MAX_MIN_DRIVER_RATING_PRIME_SEDAN AS
SELECT MAX(DRIVER_RATINGS), MIN(DRIVER_RATINGS) FROM BOOKINGS WHERE VEHICLE_TYPE = 'PRIME SEDAN';

SELECT * FROM MAX_MIN_DRIVER_RATING_PRIME_SEDAN;

#7 RETRIEVE ALL RIDES WHERE PAYMENT WAS MADE USING UPI
CREATE VIEW PAYMENT_USING_UPI AS
SELECT * FROM BOOKINGS WHERE PAYMENT_METHOD = 'UPI';

SELECT * FROM PAYMENT_USING_UPI;

#8 FIND THE AVERAGE CUSTOMER RATING PER VEHICLE TYPE
CREATE VIEW AVG_CUSTOMER_RATING_BY_VEHICLE_TYPE AS
SELECT VEHICLE_TYPE, AVG(CUSTOMER_RATING) FROM BOOKINGS GROUP BY VEHICLE_TYPE;

SELECT * FROM AVG_CUSTOMER_RATING_BY_VEHICLE_TYPE;

#9 CALCULATE THE TOTAL BOOKING VALUE OF RIDES COMPLETED SUCCESSFULLY
CREATE VIEW TOTAL_SUCCESSFUL_RIDE_VALUE AS
SELECT SUM(BOOKING_VALUE) AS TOTAL_SUCCESSFUL_RIDE_VALUE FROM BOOKINGS WHERE BOOKING_STATUS = 'SUCCESS';

SELECT * FROM TOTAL_SUCCESSFUL_RIDE_VALUE;

#10 LIST ALL INCOMPLETE RIDES ALONG WITH THE REASON
CREATE VIEW INCOMPLETE_RIDES AS
SELECT BOOKING_ID, INCOMPLETE_RIDES_REASON FROM BOOKINGS WHERE INCOMPLETE_RIDES = 'YES';

SELECT * FROM INCOMPLETE_RIDES;